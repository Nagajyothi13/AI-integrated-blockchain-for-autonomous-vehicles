const { default: BigNumber } = require('bignumber.js');
const Web3 = require('web3');
const web3 = new Web3('http://localhost:8545'); // assuming a local Ethereum node is running

// ABI of the contract whose function was called in the transaction
const abi = [[
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "getVehicleCurrentEdge",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "getVehicleNextEdge",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "getVehicleNextEdgeVehicles",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "getVehicleRoute",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "getVehicleRouteIndex",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "getVehicleSpeed",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "speed",
				"type": "uint256"
			},
			{
				"internalType": "string[]",
				"name": "route",
				"type": "string[]"
			},
			{
				"internalType": "string",
				"name": "current_edge_id",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "route_index",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "next_edge",
				"type": "string"
			},
			{
				"internalType": "string[]",
				"name": "next_edge_vehicles",
				"type": "string[]"
			}
		],
		"name": "updateVehicleInfo",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]];

// encoded input data of the transaction
const inputData = "0xa3f9d4cc00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000000047665683300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000046e316e320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e326e370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e376e380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e386e390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e396e330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e336e340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e346e350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e356e360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e356e360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e356e36000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000047665683300000000000000000000000000000000000000000000000000000000";

// array of input data types in the same order as in the function definition
const inputTypes = ['string', 'uint256','string[]','string' ,'uint256','string','string[]'];

// decode the input data
const decodedData = new BigNumber(web3.eth.abi.decodeParameters(inputTypes, inputData));

console.log(decodedData);
